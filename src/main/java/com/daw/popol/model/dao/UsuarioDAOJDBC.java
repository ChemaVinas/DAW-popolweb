package com.daw.popol.model.dao;

import com.daw.popol.model.Usuario;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.Date;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class UsuarioDAOJDBC implements UsuarioDAO {

    private static final String dbTable = "Usuarios";
    private static final String[] autoField = {"id"}; //Autogenerated field for new records
    private static final String connPoolName = "java:comp/env/jdbc/popol";  //Tomcat
    //private static String connPoolName="jdbc/popol";               //Glassfish
    private static final String SQL_BUSCAID = "SELECT * FROM Usuarios WHERE id=?";
    private static final String SQL_BUSCAUSUARIO = "SELECT * FROM Usuarios WHERE usuario=?";
    private static final String SQL_BUSCATODOS = "SELECT * FROM Usuarios ORDER BY fecha_crea DESC";
    private static final String SQL_CREA = "INSERT INTO Usuarios (usuario,clave,nombre,apellidos,mail,telefono,pais,ciudad,web,hobbies,fecha_crea) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
    private static final String SQL_CREA_PERMISOS = "INSERT INTO Roles (usuario,rol) VALUES (?,?)";
    private static final String SQL_ACTUALIZA = "UPDATE Usuarios SET usuario=?, clave=?, nombre=?, apellidos=?, mail=?, telefono=?, pais=?, ciudad=?, web=?, hobbies=? WHERE id=?";
    private static final String SQL_ACTUALIZA_PERMISOS = "UPDATE Roles SET usuario=? WHERE id=?";
    private static final String SQL_BORRA = "DELETE FROM Usuarios WHERE id=?";

    //private DataSource ds=null;
    @Autowired
    private DataSource ds;

    public UsuarioDAOJDBC() {
        /*if (ds==null) {
            try {
                Context context = new InitialContext();
                ds = (DataSource) context.lookup(connPoolName);
            } catch (NamingException ex) {
                Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }*/
    }

    /**
     * Recupera un Usuario del registro actual del RS (MAPPING)
     */
    private static Usuario usuarioMapper(ResultSet rs) throws SQLException {
        Usuario u;
        u = new Usuario(rs.getInt("id"),
                rs.getString("usuario"),
                rs.getString("clave"),
                rs.getString("nombre"),
                rs.getString("apellidos"),
                rs.getString("mail"),
                rs.getInt("telefono"),
                rs.getString("pais"),
                rs.getString("ciudad"),
                rs.getString("web"),
                rs.getString("hobbies"),
                rs.getString("fecha_crea")
        );
        return u;
    }

    @Override
    public Usuario buscaId(Integer id) {
        Usuario u = null;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_BUSCAID)) {
            stmn.setInt(1, id);
            try (ResultSet rs = stmn.executeQuery()) {
                if (rs.next()) {
                    u = usuarioMapper(rs);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return u;
    }

    @Override
    public Usuario buscaUsuario(String usuario) {
        Usuario u = null;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_BUSCAUSUARIO)) {
            stmn.setString(1, usuario);
            try (ResultSet rs = stmn.executeQuery()) {
                if (rs.next()) {
                    u = usuarioMapper(rs);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return u;
    }

    @Override
    public List<Usuario> buscaTodos() {
        List<Usuario> l = new ArrayList<>();
        try (Connection conn = ds.getConnection();
                Statement stmn = conn.createStatement();
                ResultSet rs = stmn.executeQuery(SQL_BUSCATODOS);) {
            while (rs.next()) {
                l.add(usuarioMapper(rs));
            }
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return l;
    }

    @Override
    public boolean crea(Usuario u) {
        boolean result = false;
        long time = System.currentTimeMillis();
        java.sql.Date fecha = new java.sql.Date(time);

        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_CREA, autoField);
                PreparedStatement stmn2 = conn.prepareStatement(SQL_CREA_PERMISOS, autoField);) {
            stmn.setString(1, u.getUsuario());
            stmn.setString(2, u.getClave());
            stmn.setString(3, u.getNombre());
            stmn.setString(4, u.getApellidos());
            stmn.setString(5, u.getMail());
            stmn.setInt(6, u.getTelefono());
            stmn.setString(7, u.getPais());
            stmn.setString(8, u.getCiudad());
            stmn.setString(9, u.getWeb());
            stmn.setString(10, u.getHobbies());
            stmn.setDate(11, fecha);
            result = (stmn.executeUpdate() == 1);
            stmn2.setString(1, u.getUsuario());
            stmn2.setString(2, "USUARIOS");
            result = (stmn2.executeUpdate() == 1);
            try (ResultSet rs = stmn.getGeneratedKeys()) {
                //Get autogenerated field value
                if (rs != null && rs.next()) {
                    int nuevoId = rs.getInt(1); //RS has only one field with key value
                    u.setId(nuevoId);
                }
            } catch (Exception ex) {
                Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return result;
    }

    @Override
    public boolean guarda(Usuario u) {
        boolean result = false;

        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_ACTUALIZA);
                PreparedStatement stmn2 = conn.prepareStatement(SQL_ACTUALIZA_PERMISOS);) {
            stmn.setString(1, u.getUsuario());
            stmn.setString(2, u.getClave());
            stmn.setString(3, u.getNombre());
            stmn.setString(4, u.getApellidos());
            stmn.setString(5, u.getMail());
            stmn.setInt(6, u.getTelefono());
            stmn.setString(7, u.getPais());
            stmn.setString(8, u.getCiudad());
            stmn.setString(9, u.getWeb());
            stmn.setString(10, u.getHobbies());
            stmn.setInt(11, u.getId());
            result = (stmn.executeUpdate() == 1);
            stmn2.setString(1, u.getUsuario());
            stmn2.setInt(2, u.getId());
            result = (stmn2.executeUpdate() == 1);
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return result;
    }

    @Override
    public boolean borra(Integer id) {
        boolean result = false;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_BORRA);) {
            stmn.setInt(1, id);
            result = (stmn.executeUpdate() == 1);
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return result;
    }

}
// Closing recourses and catching exceptions correctly JDK<7!!!!
//		Connection con = null;
//		Statement stmt = null;
//		ResultSet rs = null;
//		try {
//			con = ds.getConnection();
//			stmt = con.createStatement();
//			rs = stmt.executeQuery("select empid, name from Employee");
//			while(rs.next()){
//				System.out.println("Employee ID="+rs.getInt("empid")+", Name="+rs.getString("name"));
//			}
//		} catch (SQLException e) {
//			e.printStackTrace();
//		}finally{
//				try {
//					if(rs != null) rs.close();
//					if(stmt != null) stmt.close();
//					if(con != null) con.close();
//				} catch (SQLException e) {
//					e.printStackTrace();
//				}
//		}
//	}
