package com.daw.popol.model.dao;

import com.daw.popol.model.Recurso;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.Date;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository("RecursoDAOJDBC")
public class RecursoDAOJDBC implements RecursoDAO {
    private static final String dbTable="Recursos";
    private static final String[] autoField={"id"}; //Autogenerated field for new records
    private static final String connPoolName="java:comp/env/jdbc/popol";  //Tomcat
    //private static String connPoolName="jdbc/popol";               //Glassfish
    private static final String SQL_BUSCAID="SELECT * FROM Recursos WHERE id=?";
    private static final String SQL_BUSCATODOS="SELECT * FROM Recursos ORDER BY fecha DESC,hora DESC";
    private static final String SQL_BUSCARECURSOS_NOUSU="SELECT * FROM Recursos WHERE usuario<>? AND privacidad=false ORDER BY fecha DESC,hora DESC";
    private static final String SQL_BUSCARECURSOS_USU="SELECT * FROM Recursos WHERE usuario=? ORDER BY fecha DESC,hora DESC";
    private static final String SQL_CREA="INSERT INTO Recursos (nombre,tipo,descripcion,descargas,likes,privacidad,usuario,fecha,hora) VALUES (?,?,?,?,?,?,?,?,?)";
    private static final String SQL_ACTUALIZA="UPDATE Recursos SET nombre=?, tipo=?, descripcion=?, privacidad=?, usuario=?, fecha=?, hora=? WHERE id=?";
    private static final String SQL_BORRA="DELETE FROM Recursos WHERE id=?";
    private static final String SQL_DESCARGAR="UPDATE Recursos SET descargas=? WHERE id=?";
    private static final String SQL_LIKE="UPDATE Recursos SET likes=? WHERE id=?";

    @Autowired
    private DataSource ds;
    
    public RecursoDAOJDBC() {
        /*if (ds==null) {
            try {
                Context context = new InitialContext();
                ds = (DataSource) context.lookup(connPoolName);
            } catch (NamingException ex) {
                Logger.getLogger(RecursoDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        }*/
    }
    
    /**Recupera un Recurso del registro actual del RS (MAPPING)*/
    private static Recurso clienteMapper(ResultSet rs) throws SQLException {
        Recurso c;
        String fecha = rs.getString("fecha");
        String hora = rs.getString("hora");
        String ult_modific = fecha + " (" + hora + ")";
        c=new Recurso(  rs.getInt("id"),
                        rs.getString("nombre"),
                        rs.getString("tipo"),
                        rs.getString("descripcion"),
                        rs.getInt("descargas"),
                        rs.getInt("likes"),
                        rs.getBoolean("privacidad"),
                        rs.getString("usuario"),
                        ult_modific
        );
        return c;
    }  
   
    @Override
    public Recurso buscaId(Integer id) {
        Recurso r=null;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_BUSCAID)) {
            stmn.setInt(1,id);
            try(ResultSet rs=stmn.executeQuery()) {
                rs.next();
                r=clienteMapper(rs);                
            }
        } catch (SQLException ex) {
            Logger.getLogger(RecursoDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return r;
    }
    
    @Override
    public List<Recurso> buscaTodos() {
        List<Recurso> l=new ArrayList<>();
        try (Connection conn=ds.getConnection();
            Statement stmn=conn.createStatement();
            ResultSet rs=stmn.executeQuery(SQL_BUSCATODOS);
        ){
            while (rs.next()) {
                l.add(clienteMapper(rs));
            }                
        } catch (Exception ex) {
            Logger.getLogger(RecursoDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return l;
    }

    @Override
    public List<Recurso> buscaRecursosNoUsu(String usuario) {
        List<Recurso> l=new ArrayList<>();
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_BUSCARECURSOS_NOUSU)){
            stmn.setString(1,usuario);
            try(ResultSet rs=stmn.executeQuery()){
                while (rs.next()) {
                    l.add(clienteMapper(rs));
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(RecursoDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return l;
    }
    
    @Override
    public List<Recurso> buscaRecursosUsu(String usuario){
        List<Recurso> l=new ArrayList<>();
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_BUSCARECURSOS_USU)){
            stmn.setString(1,usuario);
            try(ResultSet rs=stmn.executeQuery()){
                while (rs.next()) {
                    l.add(clienteMapper(rs));
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(RecursoDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return l;
    }

    @Override
    public boolean crea(Recurso r) {
        boolean result=false;
        long time = System.currentTimeMillis();
        java.sql.Date fecha = new java.sql.Date(time);
        java.util.Date hoy = new java.util.Date();
        java.sql.Time hora = new java.sql.Time(hoy.getTime());
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_CREA,autoField);
        ){
            stmn.setString(1,r.getNombre());
            stmn.setString(2,r.getTipo());
            stmn.setString(3, r.getDescripcion());
            stmn.setInt(4, r.getDescargas());
            stmn.setInt(5, r.getLikes());
            stmn.setBoolean(6, r.isPrivacidad());
            stmn.setString(7, r.getUsuario());
            stmn.setDate(8, fecha);
            stmn.setTime(9, hora);
            result=(stmn.executeUpdate()==1);
            try (ResultSet rs=stmn.getGeneratedKeys()) {
                //Get autogenerated field value
                if (rs!=null && rs.next()) {
                    int nuevoId=rs.getInt(1); //RS has only one field with key value
                    r.setId(nuevoId);
                }
            } catch (Exception ex) {
                Logger.getLogger(RecursoDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        } catch (Exception ex) {
            Logger.getLogger(RecursoDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return result;
    }

    @Override
    public boolean guarda(Recurso r) {
        boolean result=false;
        long time = System.currentTimeMillis();
        java.sql.Date fecha = new java.sql.Date(time);
        java.util.Date hoy = new java.util.Date();
        java.sql.Time hora = new java.sql.Time(hoy.getTime());
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_ACTUALIZA);
        ){
            stmn.setString(1,r.getNombre());
            stmn.setString(2,r.getTipo());
            stmn.setString(3, r.getDescripcion());
            stmn.setBoolean(4, r.isPrivacidad());
            stmn.setString(5, r.getUsuario());
            stmn.setDate(6, fecha);
            stmn.setTime(7, hora);
            stmn.setInt(8,r.getId());
            result=(stmn.executeUpdate()==1);
        } catch (Exception ex) {
            Logger.getLogger(RecursoDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return result;
    }
    
    @Override    
    public boolean borra(Integer id) {
        boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_BORRA);
        ){
            stmn.setInt(1,id);
            result=(stmn.executeUpdate()==1);
        } catch (Exception ex) {
            Logger.getLogger(RecursoDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }         
        return result;
    }
    
    @Override
    public boolean descargar(Recurso r){
        boolean result=false;
        r.setDescargas(r.getDescargas()+1);
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_DESCARGAR);
        ){
            stmn.setInt(1,r.getDescargas());
            stmn.setInt(2, r.getId());
            result=(stmn.executeUpdate()==1);
        } catch (Exception ex) {
            Logger.getLogger(RecursoDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }         
        return result;
    }
    
    @Override
    public boolean darLike(Recurso r){
        boolean result=false;
        r.setLikes(r.getLikes()+1);
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_LIKE);
        ){
            stmn.setInt(1,r.getLikes());
            stmn.setInt(2, r.getId());
            result=(stmn.executeUpdate()==1);
        } catch (Exception ex) {
            Logger.getLogger(RecursoDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }         
        return result;
    }
}
// Closing recourses and catching exceptions correctly JDK<7!!!!
//		Connection con = null;
//		Statement stmt = null;
//		ResultSet rs = null;
//		try {
//			con = ds.getConnection();
//			stmt = con.createStatement();
//			rs = stmt.executeQuery("select empid, name from Employee");
//			while(rs.next()){
//				System.out.println("Employee ID="+rs.getInt("empid")+", Name="+rs.getString("name"));
//			}
//		} catch (SQLException e) {
//			e.printStackTrace();
//		}finally{
//				try {
//					if(rs != null) rs.close();
//					if(stmt != null) stmt.close();
//					if(con != null) con.close();
//				} catch (SQLException e) {
//					e.printStackTrace();
//				}
//		}
//	}